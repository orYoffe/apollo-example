{"version":3,"sources":["apolloClient.js","App.js","index.js"],"names":["client","ApolloClient","uri","GET_USERS","gql","_templateObject","GET_USER_BY_ID","_templateObject2","ADD_USER","_templateObject3","UPDATE_USER","_templateObject4","App","state","users","getUser","newUser","updatedUser","id","query","variables","then","result","_this","setState","data","getAllUsers","getUsers","addUser","name","mutate","mutation","updateUser","this","_this$state","console","log","react_default","a","createElement","className","map","user","index","key","concat","Component","render","react_apollo_esm","src_App","document","getElementById"],"mappings":"wKAMeA,EAJA,UAAIC,GAAa,CAC9BC,IAAK,wvBCCP,IAAMC,EAAYC,IAAHC,KAQTC,EAAiBF,IAAHG,KAQdC,EAAWJ,IAAHK,KAQRC,EAAcN,IAAHO,KAuGFC,6MA7FbC,MAAQ,CACNC,MAAO,GACPC,QAAS,KACTC,QAAS,KACTC,YAAa,QAcfF,QAAU,SAACG,GACTlB,EAAOmB,MAAM,CAAEA,MAAOb,EAAgBc,UAAW,CAAEF,QAClDG,KAAK,SAAAC,GACJC,EAAKC,SAAS,CAAET,QAASO,EAAOG,KAAKV,eAIzCW,YAAc,WACZ1B,EAAOmB,MAAM,CAAEA,MAAOhB,IACrBkB,KAAK,SAAAC,GACJC,EAAKC,SAAS,CAAEV,MAAOQ,EAAOG,KAAKE,gBAIvCC,QAAU,SAACC,GACT7B,EAAO8B,OAAO,CAAEC,SAAUvB,EAAUY,UAAW,CAAES,UAChDR,KAAK,SAAAC,GACJC,EAAKC,SAAS,CAAER,QAASM,EAAOG,KAAKG,UAErCL,EAAKG,mBAITM,WAAa,SAACd,EAAIW,GAChB7B,EAAO8B,OAAO,CAAEC,SAAUrB,EAAaU,UAAW,CAAEF,KAAIW,UACvDR,KAAK,SAAAC,GACJC,EAAKC,SAAS,CAAEP,YAAaK,EAAOG,KAAKO,aAEzCT,EAAKG,oGApCPO,KAAKL,QAAQ,QACbK,KAAKL,QAAQ,QAIbK,KAAKP,+CAoCE,IAAAQ,EAC0CD,KAAKpB,MAA9CC,EADDoB,EACCpB,MAAOE,EADRkB,EACQlB,QAASC,EADjBiB,EACiBjB,YAAaF,EAD9BmB,EAC8BnB,QAErC,OADJoB,QAAQC,IAAI,yBAA0BtB,GAEhCuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,uBACCzB,GAASA,EAAM2B,IAAI,SAACC,EAAMC,GAAP,OAClBN,EAAAC,EAAAC,cAAA,OAAKK,IAAG,GAAAC,OAAKH,EAAKxB,GAAV,cAAA2B,OAAyBF,IAC/BN,EAAAC,EAAAC,cAAA,qBAAaG,EAAKxB,IAClBmB,EAAAC,EAAAC,cAAA,uBAAeG,EAAKb,MACpBQ,EAAAC,EAAAC,cAAA,cAGHxB,GACCsB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBAAgBxB,EAAQG,IACxBmB,EAAAC,EAAAC,cAAA,0BAAkBxB,EAAQc,MAC1BQ,EAAAC,EAAAC,cAAA,YAGHvB,GACCqB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBAAgBvB,EAAQE,IACxBmB,EAAAC,EAAAC,cAAA,0BAAkBvB,EAAQa,MAC1BQ,EAAAC,EAAAC,cAAA,YAGHtB,GACCoB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4BAAoBtB,EAAYC,IAChCmB,EAAAC,EAAAC,cAAA,8BAAsBtB,EAAYY,MAClCQ,EAAAC,EAAAC,cAAA,oBAtFMO,aCzBlBC,iBAAOV,EAAAC,EAAAC,cANM,kBACXF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAgBhD,OAAQA,GACtBqC,EAAAC,EAAAC,cAACU,EAAD,QAIG,MAAUC,SAASC,eAAe","file":"static/js/main.00560238.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n});\n\nexport default client;\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport client from './apolloClient';\n\nconst GET_USERS = gql`\n  query {\n    getUsers {\n      id\n      name\n    }\n  }\n`;\nconst GET_USER_BY_ID = gql`\n  query ( $id: ID ) {\n    getUser ( id: $id )  {\n      id\n      name\n    }\n  }\n`;\nconst ADD_USER = gql`\n  mutation addUser( $name: String ) {\n    addUser ( name: $name ) {\n      id\n      name\n    }\n  }\n`;\nconst UPDATE_USER = gql`\n  mutation updateUser( $name: String, $id: ID ) {\n    updateUser ( name: $name, id: $id ) {\n      id\n      name\n    }\n  }\n`;\n\nclass App extends Component {\n  state = {\n    users: [],\n    getUser: null,\n    newUser: null,\n    updatedUser: null,\n  }\n\n  componentDidMount() {\n    // this.getUser('123');\n\n    this.addUser('Rick');\n    this.addUser('Jane');\n\n    // this.updateUser('1234', 'Marry');\n\n    this.getAllUsers();\n  }\n\n  getUser = (id) => {\n    client.query({ query: GET_USER_BY_ID, variables: { id } })\n    .then(result => {\n      this.setState({ getUser: result.data.getUser })\n    });\n  }\n\n  getAllUsers = () => {\n    client.query({ query: GET_USERS })\n    .then(result => {\n      this.setState({ users: result.data.getUsers })\n    });\n  }\n\n  addUser = (name) => {\n    client.mutate({ mutation: ADD_USER, variables: { name } })\n    .then(result => {\n      this.setState({ newUser: result.data.addUser });\n\n      this.getAllUsers();\n    });\n  }\n\n  updateUser = (id, name) => {\n    client.mutate({ mutation: UPDATE_USER, variables: { id, name } })\n    .then(result => {\n      this.setState({ updatedUser: result.data.updateUser });\n\n      this.getAllUsers();\n    });\n  }\n\n\n  render() {\n    const { users, newUser, updatedUser, getUser } = this.state;\nconsole.log('---------users--------', users);\n    return (\n      <div className=\"App\">\n        <h1>getUsers:</h1>\n        {users && users.map((user, index) => (\n          <div key={`${user.id}_userItem_${index}`}>\n            <p>User ID: {user.id}</p>\n            <p>User Name: {user.name}</p>\n            <hr />\n          </div>\n        ))}\n        {getUser && (\n          <div>\n            <h1>getUser:</h1>\n            <p>getUser ID: {getUser.id}</p>\n            <p>getUser Name: {getUser.name}</p>\n            <hr />\n          </div>\n        )}\n        {newUser && (\n          <div>\n            <h1>newUser:</h1>\n            <p>newUser ID: {newUser.id}</p>\n            <p>newUser Name: {newUser.name}</p>\n            <hr />\n          </div>\n        )}\n        {updatedUser && (\n          <div>\n            <h1>updatedUser:</h1>\n            <p>updatedUser ID: {updatedUser.id}</p>\n            <p>updatedUser Name: {updatedUser.name}</p>\n            <hr />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport client from './apolloClient';\nimport App from './App';\n\nconst Root = () => (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n\nrender(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}